// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Login.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Login.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* LoginRequst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginRequst_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Login_2eproto() {
  protobuf_AddDesc_Login_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Login.proto");
  GOOGLE_CHECK(file != NULL);
  LoginRequst_descriptor_ = file->message_type(0);
  static const int LoginRequst_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequst, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequst, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequst, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequst, userpwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequst, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequst, headurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequst, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequst, usertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequst, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequst, languige_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequst, version_),
  };
  LoginRequst_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LoginRequst_descriptor_,
      LoginRequst::default_instance_,
      LoginRequst_offsets_,
      -1,
      -1,
      -1,
      sizeof(LoginRequst),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequst, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequst, _is_default_instance_));
  LoginResponse_descriptor_ = file->message_type(1);
  static const int LoginResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, isregister_),
  };
  LoginResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LoginResponse_descriptor_,
      LoginResponse::default_instance_,
      LoginResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(LoginResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Login_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LoginRequst_descriptor_, &LoginRequst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LoginResponse_descriptor_, &LoginResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Login_2eproto() {
  delete LoginRequst::default_instance_;
  delete LoginRequst_reflection_;
  delete LoginResponse::default_instance_;
  delete LoginResponse_reflection_;
}

void protobuf_AddDesc_Login_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_Basic_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013Login.proto\032\013Basic.proto\"\336\001\n\013LoginRequ"
    "st\022\034\n\004head\030\001 \001(\0132\016.CommonRequest\022\021\n\tacco"
    "untid\030\002 \001(\t\022\020\n\010username\030\003 \001(\t\022\017\n\007userpwd"
    "\030\004 \001(\t\022\025\n\003sex\030\005 \001(\0162\010.UserSex\022\017\n\007headurl"
    "\030\006 \001(\t\022\r\n\005email\030\007 \001(\t\022\020\n\010userType\030\010 \001(\014\022"
    "\017\n\007channel\030\t \001(\r\022\020\n\010languige\030\n \001(\r\022\017\n\007ve"
    "rsion\030\013 \001(\t\"B\n\rLoginResponse\022\035\n\004head\030\001 \001"
    "(\0132\017.ResponseHeader\022\022\n\nisRegister\030\002 \001(\010b"
    "\006proto3", 327);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Login.proto", &protobuf_RegisterTypes);
  LoginRequst::default_instance_ = new LoginRequst();
  LoginResponse::default_instance_ = new LoginResponse();
  LoginRequst::default_instance_->InitAsDefaultInstance();
  LoginResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Login_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Login_2eproto {
  StaticDescriptorInitializer_Login_2eproto() {
    protobuf_AddDesc_Login_2eproto();
  }
} static_descriptor_initializer_Login_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginRequst::kHeadFieldNumber;
const int LoginRequst::kAccountidFieldNumber;
const int LoginRequst::kUsernameFieldNumber;
const int LoginRequst::kUserpwdFieldNumber;
const int LoginRequst::kSexFieldNumber;
const int LoginRequst::kHeadurlFieldNumber;
const int LoginRequst::kEmailFieldNumber;
const int LoginRequst::kUserTypeFieldNumber;
const int LoginRequst::kChannelFieldNumber;
const int LoginRequst::kLanguigeFieldNumber;
const int LoginRequst::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginRequst::LoginRequst()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LoginRequst)
}

void LoginRequst::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  head_ = const_cast< ::CommonRequest*>(&::CommonRequest::default_instance());
}

LoginRequst::LoginRequst(const LoginRequst& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LoginRequst)
}

void LoginRequst::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  head_ = NULL;
  accountid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userpwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sex_ = 0;
  headurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  usertype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_ = 0u;
  languige_ = 0u;
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

LoginRequst::~LoginRequst() {
  // @@protoc_insertion_point(destructor:LoginRequst)
  SharedDtor();
}

void LoginRequst::SharedDtor() {
  accountid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userpwd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  headurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  usertype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete head_;
  }
}

void LoginRequst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRequst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginRequst_descriptor_;
}

const LoginRequst& LoginRequst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Login_2eproto();
  return *default_instance_;
}

LoginRequst* LoginRequst::default_instance_ = NULL;

LoginRequst* LoginRequst::New(::google::protobuf::Arena* arena) const {
  LoginRequst* n = new LoginRequst;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginRequst::Clear() {
// @@protoc_insertion_point(message_clear_start:LoginRequst)
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
  accountid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userpwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sex_ = 0;
  headurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  usertype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_ = 0u;
  languige_ = 0u;
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool LoginRequst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LoginRequst)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CommonRequest head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_accountid;
        break;
      }

      // optional string accountid = 2;
      case 2: {
        if (tag == 18) {
         parse_accountid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->accountid().data(), this->accountid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "LoginRequst.accountid"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_username;
        break;
      }

      // optional string username = 3;
      case 3: {
        if (tag == 26) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "LoginRequst.username"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_userpwd;
        break;
      }

      // optional string userpwd = 4;
      case 4: {
        if (tag == 34) {
         parse_userpwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userpwd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->userpwd().data(), this->userpwd().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "LoginRequst.userpwd"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_sex;
        break;
      }

      // optional .UserSex sex = 5;
      case 5: {
        if (tag == 40) {
         parse_sex:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_sex(static_cast< ::UserSex >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_headurl;
        break;
      }

      // optional string headurl = 6;
      case 6: {
        if (tag == 50) {
         parse_headurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headurl()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->headurl().data(), this->headurl().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "LoginRequst.headurl"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_email;
        break;
      }

      // optional string email = 7;
      case 7: {
        if (tag == 58) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "LoginRequst.email"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_userType;
        break;
      }

      // optional bytes userType = 8;
      case 8: {
        if (tag == 66) {
         parse_userType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_usertype()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_channel;
        break;
      }

      // optional uint32 channel = 9;
      case 9: {
        if (tag == 72) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_languige;
        break;
      }

      // optional uint32 languige = 10;
      case 10: {
        if (tag == 80) {
         parse_languige:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &languige_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_version;
        break;
      }

      // optional string version = 11;
      case 11: {
        if (tag == 90) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "LoginRequst.version"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LoginRequst)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LoginRequst)
  return false;
#undef DO_
}

void LoginRequst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LoginRequst)
  // optional .CommonRequest head = 1;
  if (this->has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->head_, output);
  }

  // optional string accountid = 2;
  if (this->accountid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->accountid().data(), this->accountid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LoginRequst.accountid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->accountid(), output);
  }

  // optional string username = 3;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LoginRequst.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->username(), output);
  }

  // optional string userpwd = 4;
  if (this->userpwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userpwd().data(), this->userpwd().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LoginRequst.userpwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->userpwd(), output);
  }

  // optional .UserSex sex = 5;
  if (this->sex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->sex(), output);
  }

  // optional string headurl = 6;
  if (this->headurl().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->headurl().data(), this->headurl().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LoginRequst.headurl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->headurl(), output);
  }

  // optional string email = 7;
  if (this->email().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LoginRequst.email");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->email(), output);
  }

  // optional bytes userType = 8;
  if (this->usertype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->usertype(), output);
  }

  // optional uint32 channel = 9;
  if (this->channel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->channel(), output);
  }

  // optional uint32 languige = 10;
  if (this->languige() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->languige(), output);
  }

  // optional string version = 11;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LoginRequst.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->version(), output);
  }

  // @@protoc_insertion_point(serialize_end:LoginRequst)
}

::google::protobuf::uint8* LoginRequst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LoginRequst)
  // optional .CommonRequest head = 1;
  if (this->has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->head_, target);
  }

  // optional string accountid = 2;
  if (this->accountid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->accountid().data(), this->accountid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LoginRequst.accountid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->accountid(), target);
  }

  // optional string username = 3;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LoginRequst.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->username(), target);
  }

  // optional string userpwd = 4;
  if (this->userpwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userpwd().data(), this->userpwd().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LoginRequst.userpwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->userpwd(), target);
  }

  // optional .UserSex sex = 5;
  if (this->sex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->sex(), target);
  }

  // optional string headurl = 6;
  if (this->headurl().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->headurl().data(), this->headurl().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LoginRequst.headurl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->headurl(), target);
  }

  // optional string email = 7;
  if (this->email().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LoginRequst.email");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->email(), target);
  }

  // optional bytes userType = 8;
  if (this->usertype().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->usertype(), target);
  }

  // optional uint32 channel = 9;
  if (this->channel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->channel(), target);
  }

  // optional uint32 languige = 10;
  if (this->languige() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->languige(), target);
  }

  // optional string version = 11;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LoginRequst.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->version(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:LoginRequst)
  return target;
}

int LoginRequst::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:LoginRequst)
  int total_size = 0;

  // optional .CommonRequest head = 1;
  if (this->has_head()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  // optional string accountid = 2;
  if (this->accountid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->accountid());
  }

  // optional string username = 3;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // optional string userpwd = 4;
  if (this->userpwd().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userpwd());
  }

  // optional .UserSex sex = 5;
  if (this->sex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->sex());
  }

  // optional string headurl = 6;
  if (this->headurl().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->headurl());
  }

  // optional string email = 7;
  if (this->email().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->email());
  }

  // optional bytes userType = 8;
  if (this->usertype().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->usertype());
  }

  // optional uint32 channel = 9;
  if (this->channel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->channel());
  }

  // optional uint32 languige = 10;
  if (this->languige() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->languige());
  }

  // optional string version = 11;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRequst::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LoginRequst)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LoginRequst* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginRequst>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LoginRequst)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LoginRequst)
    MergeFrom(*source);
  }
}

void LoginRequst::MergeFrom(const LoginRequst& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LoginRequst)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_head()) {
    mutable_head()->::CommonRequest::MergeFrom(from.head());
  }
  if (from.accountid().size() > 0) {

    accountid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.accountid_);
  }
  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.userpwd().size() > 0) {

    userpwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userpwd_);
  }
  if (from.sex() != 0) {
    set_sex(from.sex());
  }
  if (from.headurl().size() > 0) {

    headurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.headurl_);
  }
  if (from.email().size() > 0) {

    email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  if (from.usertype().size() > 0) {

    usertype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.usertype_);
  }
  if (from.channel() != 0) {
    set_channel(from.channel());
  }
  if (from.languige() != 0) {
    set_languige(from.languige());
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
}

void LoginRequst::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LoginRequst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRequst::CopyFrom(const LoginRequst& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LoginRequst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRequst::IsInitialized() const {

  return true;
}

void LoginRequst::Swap(LoginRequst* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginRequst::InternalSwap(LoginRequst* other) {
  std::swap(head_, other->head_);
  accountid_.Swap(&other->accountid_);
  username_.Swap(&other->username_);
  userpwd_.Swap(&other->userpwd_);
  std::swap(sex_, other->sex_);
  headurl_.Swap(&other->headurl_);
  email_.Swap(&other->email_);
  usertype_.Swap(&other->usertype_);
  std::swap(channel_, other->channel_);
  std::swap(languige_, other->languige_);
  version_.Swap(&other->version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginRequst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginRequst_descriptor_;
  metadata.reflection = LoginRequst_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginRequst

// optional .CommonRequest head = 1;
bool LoginRequst::has_head() const {
  return !_is_default_instance_ && head_ != NULL;
}
void LoginRequst::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
const ::CommonRequest& LoginRequst::head() const {
  // @@protoc_insertion_point(field_get:LoginRequst.head)
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
::CommonRequest* LoginRequst::mutable_head() {
  
  if (head_ == NULL) {
    head_ = new ::CommonRequest;
  }
  // @@protoc_insertion_point(field_mutable:LoginRequst.head)
  return head_;
}
::CommonRequest* LoginRequst::release_head() {
  // @@protoc_insertion_point(field_release:LoginRequst.head)
  
  ::CommonRequest* temp = head_;
  head_ = NULL;
  return temp;
}
void LoginRequst::set_allocated_head(::CommonRequest* head) {
  delete head_;
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:LoginRequst.head)
}

// optional string accountid = 2;
void LoginRequst::clear_accountid() {
  accountid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LoginRequst::accountid() const {
  // @@protoc_insertion_point(field_get:LoginRequst.accountid)
  return accountid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginRequst::set_accountid(const ::std::string& value) {
  
  accountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LoginRequst.accountid)
}
 void LoginRequst::set_accountid(const char* value) {
  
  accountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginRequst.accountid)
}
 void LoginRequst::set_accountid(const char* value, size_t size) {
  
  accountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginRequst.accountid)
}
 ::std::string* LoginRequst::mutable_accountid() {
  
  // @@protoc_insertion_point(field_mutable:LoginRequst.accountid)
  return accountid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LoginRequst::release_accountid() {
  // @@protoc_insertion_point(field_release:LoginRequst.accountid)
  
  return accountid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginRequst::set_allocated_accountid(::std::string* accountid) {
  if (accountid != NULL) {
    
  } else {
    
  }
  accountid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), accountid);
  // @@protoc_insertion_point(field_set_allocated:LoginRequst.accountid)
}

// optional string username = 3;
void LoginRequst::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LoginRequst::username() const {
  // @@protoc_insertion_point(field_get:LoginRequst.username)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginRequst::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LoginRequst.username)
}
 void LoginRequst::set_username(const char* value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginRequst.username)
}
 void LoginRequst::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginRequst.username)
}
 ::std::string* LoginRequst::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:LoginRequst.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LoginRequst::release_username() {
  // @@protoc_insertion_point(field_release:LoginRequst.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginRequst::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:LoginRequst.username)
}

// optional string userpwd = 4;
void LoginRequst::clear_userpwd() {
  userpwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LoginRequst::userpwd() const {
  // @@protoc_insertion_point(field_get:LoginRequst.userpwd)
  return userpwd_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginRequst::set_userpwd(const ::std::string& value) {
  
  userpwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LoginRequst.userpwd)
}
 void LoginRequst::set_userpwd(const char* value) {
  
  userpwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginRequst.userpwd)
}
 void LoginRequst::set_userpwd(const char* value, size_t size) {
  
  userpwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginRequst.userpwd)
}
 ::std::string* LoginRequst::mutable_userpwd() {
  
  // @@protoc_insertion_point(field_mutable:LoginRequst.userpwd)
  return userpwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LoginRequst::release_userpwd() {
  // @@protoc_insertion_point(field_release:LoginRequst.userpwd)
  
  return userpwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginRequst::set_allocated_userpwd(::std::string* userpwd) {
  if (userpwd != NULL) {
    
  } else {
    
  }
  userpwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userpwd);
  // @@protoc_insertion_point(field_set_allocated:LoginRequst.userpwd)
}

// optional .UserSex sex = 5;
void LoginRequst::clear_sex() {
  sex_ = 0;
}
 ::UserSex LoginRequst::sex() const {
  // @@protoc_insertion_point(field_get:LoginRequst.sex)
  return static_cast< ::UserSex >(sex_);
}
 void LoginRequst::set_sex(::UserSex value) {
  
  sex_ = value;
  // @@protoc_insertion_point(field_set:LoginRequst.sex)
}

// optional string headurl = 6;
void LoginRequst::clear_headurl() {
  headurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LoginRequst::headurl() const {
  // @@protoc_insertion_point(field_get:LoginRequst.headurl)
  return headurl_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginRequst::set_headurl(const ::std::string& value) {
  
  headurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LoginRequst.headurl)
}
 void LoginRequst::set_headurl(const char* value) {
  
  headurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginRequst.headurl)
}
 void LoginRequst::set_headurl(const char* value, size_t size) {
  
  headurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginRequst.headurl)
}
 ::std::string* LoginRequst::mutable_headurl() {
  
  // @@protoc_insertion_point(field_mutable:LoginRequst.headurl)
  return headurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LoginRequst::release_headurl() {
  // @@protoc_insertion_point(field_release:LoginRequst.headurl)
  
  return headurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginRequst::set_allocated_headurl(::std::string* headurl) {
  if (headurl != NULL) {
    
  } else {
    
  }
  headurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), headurl);
  // @@protoc_insertion_point(field_set_allocated:LoginRequst.headurl)
}

// optional string email = 7;
void LoginRequst::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LoginRequst::email() const {
  // @@protoc_insertion_point(field_get:LoginRequst.email)
  return email_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginRequst::set_email(const ::std::string& value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LoginRequst.email)
}
 void LoginRequst::set_email(const char* value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginRequst.email)
}
 void LoginRequst::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginRequst.email)
}
 ::std::string* LoginRequst::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:LoginRequst.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LoginRequst::release_email() {
  // @@protoc_insertion_point(field_release:LoginRequst.email)
  
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginRequst::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:LoginRequst.email)
}

// optional bytes userType = 8;
void LoginRequst::clear_usertype() {
  usertype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LoginRequst::usertype() const {
  // @@protoc_insertion_point(field_get:LoginRequst.userType)
  return usertype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginRequst::set_usertype(const ::std::string& value) {
  
  usertype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LoginRequst.userType)
}
 void LoginRequst::set_usertype(const char* value) {
  
  usertype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginRequst.userType)
}
 void LoginRequst::set_usertype(const void* value, size_t size) {
  
  usertype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginRequst.userType)
}
 ::std::string* LoginRequst::mutable_usertype() {
  
  // @@protoc_insertion_point(field_mutable:LoginRequst.userType)
  return usertype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LoginRequst::release_usertype() {
  // @@protoc_insertion_point(field_release:LoginRequst.userType)
  
  return usertype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginRequst::set_allocated_usertype(::std::string* usertype) {
  if (usertype != NULL) {
    
  } else {
    
  }
  usertype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), usertype);
  // @@protoc_insertion_point(field_set_allocated:LoginRequst.userType)
}

// optional uint32 channel = 9;
void LoginRequst::clear_channel() {
  channel_ = 0u;
}
 ::google::protobuf::uint32 LoginRequst::channel() const {
  // @@protoc_insertion_point(field_get:LoginRequst.channel)
  return channel_;
}
 void LoginRequst::set_channel(::google::protobuf::uint32 value) {
  
  channel_ = value;
  // @@protoc_insertion_point(field_set:LoginRequst.channel)
}

// optional uint32 languige = 10;
void LoginRequst::clear_languige() {
  languige_ = 0u;
}
 ::google::protobuf::uint32 LoginRequst::languige() const {
  // @@protoc_insertion_point(field_get:LoginRequst.languige)
  return languige_;
}
 void LoginRequst::set_languige(::google::protobuf::uint32 value) {
  
  languige_ = value;
  // @@protoc_insertion_point(field_set:LoginRequst.languige)
}

// optional string version = 11;
void LoginRequst::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LoginRequst::version() const {
  // @@protoc_insertion_point(field_get:LoginRequst.version)
  return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginRequst::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LoginRequst.version)
}
 void LoginRequst::set_version(const char* value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginRequst.version)
}
 void LoginRequst::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginRequst.version)
}
 ::std::string* LoginRequst::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:LoginRequst.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LoginRequst::release_version() {
  // @@protoc_insertion_point(field_release:LoginRequst.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginRequst::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:LoginRequst.version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginResponse::kHeadFieldNumber;
const int LoginResponse::kIsRegisterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginResponse::LoginResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LoginResponse)
}

void LoginResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  head_ = const_cast< ::ResponseHeader*>(&::ResponseHeader::default_instance());
}

LoginResponse::LoginResponse(const LoginResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LoginResponse)
}

void LoginResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  head_ = NULL;
  isregister_ = false;
}

LoginResponse::~LoginResponse() {
  // @@protoc_insertion_point(destructor:LoginResponse)
  SharedDtor();
}

void LoginResponse::SharedDtor() {
  if (this != default_instance_) {
    delete head_;
  }
}

void LoginResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginResponse_descriptor_;
}

const LoginResponse& LoginResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Login_2eproto();
  return *default_instance_;
}

LoginResponse* LoginResponse::default_instance_ = NULL;

LoginResponse* LoginResponse::New(::google::protobuf::Arena* arena) const {
  LoginResponse* n = new LoginResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:LoginResponse)
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
  isregister_ = false;
}

bool LoginResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LoginResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ResponseHeader head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_isRegister;
        break;
      }

      // optional bool isRegister = 2;
      case 2: {
        if (tag == 16) {
         parse_isRegister:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isregister_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LoginResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LoginResponse)
  return false;
#undef DO_
}

void LoginResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LoginResponse)
  // optional .ResponseHeader head = 1;
  if (this->has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->head_, output);
  }

  // optional bool isRegister = 2;
  if (this->isregister() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isregister(), output);
  }

  // @@protoc_insertion_point(serialize_end:LoginResponse)
}

::google::protobuf::uint8* LoginResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LoginResponse)
  // optional .ResponseHeader head = 1;
  if (this->has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->head_, target);
  }

  // optional bool isRegister = 2;
  if (this->isregister() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isregister(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:LoginResponse)
  return target;
}

int LoginResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:LoginResponse)
  int total_size = 0;

  // optional .ResponseHeader head = 1;
  if (this->has_head()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  // optional bool isRegister = 2;
  if (this->isregister() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LoginResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LoginResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LoginResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LoginResponse)
    MergeFrom(*source);
  }
}

void LoginResponse::MergeFrom(const LoginResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LoginResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_head()) {
    mutable_head()->::ResponseHeader::MergeFrom(from.head());
  }
  if (from.isregister() != 0) {
    set_isregister(from.isregister());
  }
}

void LoginResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginResponse::CopyFrom(const LoginResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginResponse::IsInitialized() const {

  return true;
}

void LoginResponse::Swap(LoginResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginResponse::InternalSwap(LoginResponse* other) {
  std::swap(head_, other->head_);
  std::swap(isregister_, other->isregister_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginResponse_descriptor_;
  metadata.reflection = LoginResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginResponse

// optional .ResponseHeader head = 1;
bool LoginResponse::has_head() const {
  return !_is_default_instance_ && head_ != NULL;
}
void LoginResponse::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
const ::ResponseHeader& LoginResponse::head() const {
  // @@protoc_insertion_point(field_get:LoginResponse.head)
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
::ResponseHeader* LoginResponse::mutable_head() {
  
  if (head_ == NULL) {
    head_ = new ::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:LoginResponse.head)
  return head_;
}
::ResponseHeader* LoginResponse::release_head() {
  // @@protoc_insertion_point(field_release:LoginResponse.head)
  
  ::ResponseHeader* temp = head_;
  head_ = NULL;
  return temp;
}
void LoginResponse::set_allocated_head(::ResponseHeader* head) {
  delete head_;
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:LoginResponse.head)
}

// optional bool isRegister = 2;
void LoginResponse::clear_isregister() {
  isregister_ = false;
}
 bool LoginResponse::isregister() const {
  // @@protoc_insertion_point(field_get:LoginResponse.isRegister)
  return isregister_;
}
 void LoginResponse::set_isregister(bool value) {
  
  isregister_ = value;
  // @@protoc_insertion_point(field_set:LoginResponse.isRegister)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
